    # def _do_callback(self, func, *args, **kwargs):
    #     if func is None:
    #         return False

    #     if not callable(func):
    #         raise TypeError("'func' should be a callable")

    #     result = func(self.response, *args, **kwargs)
    #     if not isinstance(result, (dict, function)):
    #         raise TypeError("'func' should return a dictionnary or a function")
    #     return result
    
    # @classmethod
    # def follow(cls, url, callback=None):
    #     if isinstance(url, list):
    #         url = url[:1][-1]
    #     instance = cls(url)
    #     instance._send()
    #     # cls._do_callback(cls, callback)
    #     return instance

    # @classmethod
    # def follow_all(cls, urls=[], callback=None):
    #     threads = []
    #     objs = []
    #     for index, url in enumerate(urls):
    #         instance = cls(url, counter=index)
    #         objs.append(instance)
    #         threads.append(Thread(target=instance._send))

    #     for thread in threads:
    #         thread.run()
    #         if thread.is_alive():
    #             thread.join()
    #     return objs

from io import BytesIO, FileIO, StringIO
from typing import Any, List, Type, Union

from zineb.http.request import HTTPRequest
from zineb.http.responses import HTMLResponse, JsonResponse, XMLResponse
from zineb.storages import BaseStorage
from zineb.utils.iteration import RequestQueue

# T = TypeVar('T', bound='Spider')

class SpiderOptions:
    base_url: str = ...
    domains: list = ...
    limit_requests_to: int = ...
    python_path: str = ...
    prepared_requests: RequestQueue = ...
    spider: Type = ...
    spider_name: str = ...
    start_urls: list = ...
    verbose_name: str = ...
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def update_options(self, cls: Type[Spider], name: str) -> None: ...
    def add(self, name: str, value: Union[list, tuple, str, type]) -> None: ...
    def initialize_queue(self) -> None: ...


class BaseSpider(type):
    def __new__(cls, name: str, bases: tuple, attrs: dict): ...


class Spider(metaclass=BaseSpider):
    meta: SpiderOptions = ...
    start_urls: List[str] = ...
    storage: BaseStorage = ...
    def __init__(self): ...
    def __repr__(self) -> str: ...
    def __getattribute__(self, name: str) -> Any: ...
    def _resolve_requests(self) -> None: ...
    def start(self, response: Union[HTMLResponse, JsonResponse, XMLResponse], request: HTTPRequest, **kwargs) -> Any: ...


# class SitemapCrawler(Spider): ...


class FileCrawler:
    buffers: List[StringIO, FileIO, BytesIO] = ...
    start_files: List[str] = ...
    root_dir: str = ...
    def __init__(self) -> None: ...
    def __del__(self) -> None: ...
    @staticmethod
    def _check_path(path: str) -> bool: ...
    def start(self, soup, **kwargs) -> Any: ...

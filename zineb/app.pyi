from typing import Any, Generic, List, Type, TypeVar, Union

from zineb.app import SpiderOptions
from zineb.http.request import HTTPRequest
from zineb.http.responses import HTMLResponse, JsonResponse, XMLResponse
from zineb.utils.iteration import RequestQueue

T = TypeVar('T', covariant=True)
T2 = TypeVar('T2', bound=Spider)

class SpiderOptions(T2):
    allowed_options: List[str] = ...
    base_url: str = ...
    domains: list = ...
    limit_requests_to: int = ...
    options: dict = ...
    python_path: str = ...
    prepared_requests: RequestQueue = ...
    spider: Spider = ...
    spider_name: str = ...
    start_urls: list = ...
    verbose_name: str = ...
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getitem__(self, name) -> str: ...
    def has_option(self, name: str) -> str: ...
    def get_option_by_name(self, name: str) -> str: ...
    def update(self, options: dict) -> None: ...


class BaseSpider(type):
    def __new__(cls, name: str, bases: tuple, attrs: dict): ...


class Spider(metaclass=BaseSpider):
    meta: SpiderOptions = ...
    start_urls: List[str] = ...
    def __init__(self): ...
    def __repr__(self) -> str: ...
    def start(self, response: Union[HTMLResponse, JsonResponse, XMLResponse], request: HTTPRequest = None, **kwargs) -> Any: ...


class SitemapCrawler(Spider): ...


class FileCrawler:
    start_files: List[str] = ...
    root_dir: str = ...
    def __init__(self): ...

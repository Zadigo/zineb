from typing import Any, Generic, List, OrderedDict, TypeVar, Union
from zineb.http.responses import HTMLResponse, JsonResponse, XMLResponse
from zineb.http.request import HTTPRequest

T = TypeVar('T', covariant=True)

class SpiderOptions:
    spider_name: str = ...
    python_path: str = ...
    options: OrderedDict = ...
    allowed_options: List[str] = ...
    def __init__(self): ...
    def __repr__(self) -> str: ...
    def __getitem__(self, name) -> str: ...
    def has_option(self, name: str) -> str: ...
    def get_option_by_name(self, name: str) -> str: ...
    def update(self, options: dict) -> None: ...


class BaseSpider(Generic[T]):
    def __new__(cls, name: str, bases: tuple, attrs: dict): ...


class Spider(metaclass=BaseSpider):
    start_urls: List[str] = ...
    def __init__(self, **kwargs): ...
    def start(self, response: Union[HTMLResponse, JsonResponse, XMLResponse], request: HTTPRequest = None, **kwargs) -> Any: ...
    

class Zineb(Spider): ...


class SitemapCrawler(Spider): ...


class FileCrawler:
    start_files: List[str] = ...
    root_dir: str = ...
    def __init__(self): ...

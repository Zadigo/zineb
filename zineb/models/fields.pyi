import datetime
from typing import (Any, Callable, Dict, Generic, List, Optional, Tuple, Type,
                    TypeVar, Union, Literal)
from xmlrpc.client import Boolean

from zineb.models.datastructure import Model
from zineb.models.fields import Field
from zineb.models.fields import OneToOneDescriptor

F = TypeVar('F', bound='Field', covariant=True)

T2 = TypeVar('T2', bound=[Field], covariant=True)


class Value:
    result: Any = ...
    field_name: str = ...
    output_field: Field = ...
    def __init__(self, value: Any, output_field: Optional[Type] = ...): ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __eq__(self, value: Any) -> bool: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def is_value_instance(self) -> bool: ...


class DeferredAttribute:
    def __get__(self, instance: Callable, cls: Field = Optional[None]): ...


class OneToOneDescriptor(DeferredAttribute):
    def __get__(self, instance: Callable, cls:Field = Optional[None]) -> List: ...


class Field(Generic[F]):
    _cached_result: None = ...
    _default_validators: list = ...
    _validation_error_message: str = ...
    _validators: List[Callable[..., Any]] = ...
    default: Union[str, int, float, list, dict] = ...
    field_descriptor: DeferredAttribute = ...
    field_name: str = ...
    max_length: int = ...
    model: Model = ...
    null: bool = ...
    def __init__(self, max_length: Optional[int] = ..., null: Optional[bool] = ..., default: Optional[Union[str, int, float, None]] = ..., validators: Optional[list[Callable[..., None]]] = ...) -> None: ...
    def __hash__(self) -> int: ...
    @property
    def internal_type(self) -> Type[Union[str, int, float, list, dict]]: ...
    @property
    def internal_name(sefl) -> str: ...
    def _to_python_object(self, value: Any) -> Any: ...
    def update_model_options(self, model: Model, field_name: str) -> None: ...
    def resolve(self, value: Any) -> Any: ...
    

class CharField(Field): ...


class NameField(CharField):
    def __init__(self, **kwargs): ...


class TextField(CharField):
    def __init__(self, max_length: Optional[int] = 500, **kwargs): ...


class EmailField(CharField):
    limit_to_domains: list = ...
    def __init__(self, limit_to_domains: Optional[Union[List[str], Tuple[str]]] = ..., null: Optional[bool] = ..., default: Optional[str] = ..., validators: Optional[list] = ...): ...


class URLField(CharField):
    def __init__(self, limit_to_domains: Optional[Union[List[str], Tuple[str]]] = ..., null: Optional[bool] = ..., default: Optional[str] = ..., validators: Optional[List[Callable[..., Any]]] = ...): ...


class ImageField(URLField):
    as_thumbnail: bool = ...
    download: str = ...
    download_to: str = ...
    def __init__(self, max_length: Optional[int] = ..., null: Optional[bool] = ..., validators: Optional[list[Callable]] = ..., download: Optional[bool] = ..., as_thumnail: Optional[bool] = ..., download_to: Optional[str] = ...): ...
    

class IntegerField(Field):
    def __init__(self, default: Optional[Union[int, float]] = ..., min_value: Optional[int] = ..., max_value: Optional[int] = ..., validators: Optional[list] = ...): ...


class DecimalField(IntegerField): ...


class DateFieldsMixin(Generic[T2]):
    date_parser: datetime.datetime.strptime = ...
    date_formats: list = ...
    def __init__(self, date_format: Optional[str] = ..., default: Optional[Any] = ...): ...


class DateField(DateFieldsMixin, Field): ...


class AgeField(DateFieldsMixin, Field):
    def __init__(self, date_format: Optional[str] = ..., default: Optional[Any] = ...): ...


class MappingFieldMixin(Generic[T2]): ...


class ListField(MappingFieldMixin, Field):
    def __init__(self, default: List = ..., validators: Optional[Callable[..., Any]] = ...): ...


class JsonField(MappingFieldMixin, Field):
    def __init__(self, default: Dict = ..., validators: Optional[Callable[..., Any]] = ...): ...


class RegexField(Field):
    def __init__(self, pattern: str, group: int = 0, output_field: Field = ..., **kwargs): ...


class BooleanField(Field):
    def __init__(self, default: Boolean = ..., null: Boolean = ...): ...


class AutoField(Field): ...


class RelatedField(Field):
    is_relationship_field: bool = ...
    related_model: Model = ...
    related_name: str = ...
    reverse_related_name: str = ...
    is_relationship_field: Literal[True] = ...
    def __init__(self, model: Model, relation_name: str = Optional[None]): ...
    def resolve(self, value: Any): ...


class RelatedModel(RelatedField):
    field_descriptor: OneToOneDescriptor = ...

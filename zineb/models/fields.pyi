import datetime
from typing import (Any, Callable, Dict, Generic, List, Optional, Tuple, Type,
                    TypeVar, Union)
from xmlrpc.client import Boolean

from zineb.models.datastructure import Model

F = TypeVar('F', bound='Field', covariant=True)

T2 = TypeVar('T2', bound=['DateField', 'AgeField'], covariant=True)


class Value:
    def __init__(self, value: Any, output_field: Optional[Type] = ...): ...
    
    
class Field(Generic[F]):
    default: Union[str, int, float, list, dict] = ...
    field_name: str = ...
    max_length: int = ...
    model: Model = ...
    name: str = ...
    null: bool = ...
    validators: List[Callable[..., Any]] = ...
    def __init__(self, max_length: Optional[int]= ..., null: Optional[bool] = ..., default: Optional[Union[str, int, float]] = ..., validators: Optional[list[Callable[..., Any]]] = ...) -> None: ...
    @property
    def internal_type(self) -> Type[Union[str, int, float, list, dict]]: ...
    @property
    def internal_name(sefl) -> str: ...
    def resolve(self, value: Any) -> Any: ...
    

class CharField(Field): ...


class TextField(CharField):
    def __init__(self, max_length: Optional[int] = 500, **kwargs): ...


class NameField(CharField):
    def __init__(self, **kwargs): ...


class EmailField(CharField):
    limit_to_domains: list = ...
    def __init__(self, limit_to_domains: Optional[Union[List[str], Tuple[str]]] = ..., null: Optional[bool] = ..., default: Optional[str] = ..., validators: Optional[list] = ...): ...


class URLField(CharField):
    def __init__(self, limit_to_domains: Optional[Union[List[str], Tuple[str]]] = ..., null: Optional[bool] = ..., default: Optional[str] = ..., validators: Optional[List[Callable[..., Any]]] = ...): ...


class ImageField(URLField):
    as_thumbnail: bool = ...
    download: str = ...
    download_to: str = ...
    def __init__(self, max_length: Optional[int] = ..., null: Optional[bool] = ..., validators: Optional[list[Callable]] = ..., download: Optional[bool] = ..., as_thumnail: Optional[bool] = ..., download_to: Optional[str] = ...): ...
    

class IntegerField(Field):
    def __init__(self, default: Optional[Union[int, float]] = ..., min_value: Optional[int] = ..., max_value: Optional[int] = ..., validators: Optional[list] = ...): ...


class DecimalField(IntegerField): ...


class DateFieldsMixin(Generic[T2]):
    date_parser: datetime.datetime.strptime = ...
    date_formats: list = ...
    def __init__(self, date_format: Optional[str] = ..., default: Optional[Any] = ...): ...


class DateField(DateFieldsMixin, Field): ...


class AgeField(DateFieldsMixin, Field):
    def __init__(self, date_format: Optional[str] = ..., default: Optional[Any] = ...): ...


class MappingFieldMixin(Generic[T2]): ...


class ListField(MappingFieldMixin, Field):
    def __init__(self, default: List = ..., validators: Optional[Callable[..., Any]] = ...): ...


class JsonField(MappingFieldMixin, Field):
    def __init__(self, default: Dict = ..., validators: Optional[Callable[..., Any]] = ...): ...


class RegexField(Field):
    def __init__(self, pattern: str, group: int = 0, output_field: Field = ..., **kwargs): ...


class BooleanField(Field):
    def __init__(self, default: Boolean = ..., null: Boolean = ...): ...

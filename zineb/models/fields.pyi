from typing import Any, Callable, Generic, List, Optional, Tuple, Type, TypeVar, Union
# from zineb.models.fields import Field

T = TypeVar('T', covariant=True)

class Value:
    def __init__(self, value: Any, output_field: Optional[Type] = None): ...
    
    
class Field(Generic[T]):
    default: Union[int, str, float] = ...
    max_length: int = ...
    name: str = ...
    null: bool = ...
    def __init__(self, max_length: int=Optional[None], null: bool=Optional[True], default: Optional[Union[str, int, float]]=None, validators: Optional[list[Callable]]=[]): ...
    def resolve(self, value: Any): ...
    

class CharField(Field): ...


class TextField(CharField):
    def __init__(self, max_length: Optional[int]=500, **kwargs): ...


class NameField(CharField):
    def __init__(self, **kwargs): ...


class EmailField(CharField):
    def __init__(self, limit_to_domains: Optional[Union[List[str], Tuple[str]]] = [], null: Optional[bool] = False, default: Optional[str] = None, validators: Optional[list] = []): ...

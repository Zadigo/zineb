from typing import Any, Type, Union

from zineb.models.fields import Field
from zineb.models.datastructure import Model

class FunctionsMixin:
    _cached_data: Union[int, float] = ...
    field_name: str = ...
    model: Type[Model] = ...
    def _to_python_object(self, value: Any) -> Union[int, float, str, dict, list]: ...
    def get_field_object(self) -> Field: ...


class Math(FunctionsMixin):
    def __init__(self, by: Union[int, float]): ...
    def __repr__(self) -> str: ...
    def resolve(self) -> Field: ...


class Substract(Math):
    def resolve(self) -> None: ...

class Add(Math):
    def resolve(self) -> None: ...
    
    
class Multiply(Math):
    def resolve(self) -> None: ...


class Divide(Math):
    def resolve(self) -> None: ...

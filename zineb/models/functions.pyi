import datetime
from typing import Any, List, Type, Union

from zineb.models.datastructure import Model
from zineb.models.fields import Field


class FunctionsMixin:
    field_name: str = ...
    model: Type[Model] = ...
    _cached_data: Union[int, float] = ...
    def _to_python_object(self, value: Any) -> Union[int, float, str, dict, list]: ...
    def get_field_object(self) -> Field: ...
    def resolve(self) -> None: ...


class Math(FunctionsMixin):
    def __init__(self, by: Union[int, float]): ...
    def __repr__(self) -> str: ...
    def resolve(self) -> Field: ...


class Substract(Math):
    def resolve(self) -> None: ...

class Add(Math):
    def resolve(self) -> None: ...

    
class Multiply(Math):
    def resolve(self) -> None: ...


class Divide(Math):
    def resolve(self) -> None: ...


class When:
    _cached_data: Union[str, int, float, list, dict] = ...
    model: Model = ...
    def __init__(self, if_condition: str, then_condition: str, else_condition: str= ...): ...
    def __repr__(self): ...
    def resolve(self): ...
    def parse_expression(self, expression: str): ...
    def compare(self, exp, value) -> bool: ...


class DateExtractorMixin:
    lookup_name: str = ...
    value: str = value
    date_parser: datetime.datetime.strptime = ...
    date_formats: List = ...
    # _datetime_object: datetime.datetime = None
    def __init__(self, value: Any, date_format: str = ...): ...
    def _to_python_object(self, value) -> str: ...
    def resolve(self): ...


class ExtractYear(DateExtractorMixin, FunctionsMixin): ...


class ExtractMonth(DateExtractorMixin, FunctionsMixin): ...


class ExtractDay(DateExtractorMixin, FunctionsMixin): ...


class ComparisionMixin(FunctionsMixin):
    values: list = values
    def __init__(self, *values): ...
    def __repr__(self) -> str: ...


class Greatest(ComparisionMixin):
    def resolve(self) -> None: ...


class Smallest(ComparisionMixin):
    def resolve(self) -> None: ...

from typing import Callable, Dict, List, Union
from xmlrpc.client import Boolean
from zineb.utils.containers import SmartDict

class BaseConstraint:
    name = ...
    _data_container: SmartDict = ...
    constrained_fields: List[str] = ...
    condition: Callable = ...
    values: dict = ...
    unique_together: List[List[str], List[str]] = ...
    unique: List = ...
    def __init__(self, fields: List[str], name: str, condition: Callable[..., Union[str, int, float]]=None) -> None: ...
    def __repr__(self) -> str: ...
    def prepare(self) -> None: ...
    def check_constraint(self, value_to_check) -> None: ...


class UniqueConstraint(BaseConstraint):
    def check_constraint(self, value_to_check: Union[str, int, float]) -> Boolean: ...


class CheckConstraint(BaseConstraint):
    def check_constraint(self, value_to_check: Union[str, int, float]) -> Dict: ...

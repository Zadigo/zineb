from typing import Any, Callable, Generic, List, Optional, Type, TypeVar, Union
from utils.containers import SmartDict

from zineb.http.responses import HTMLResponse
from zineb.models.fields import Field
from zineb.models.functions import Add, Divide, Multiply, Substract, When

T = TypeVar('T', covariant=True)

class Base(Generic[T]):
    def __new__(cls: Type, name: str, bases: tuple, attrs: dict) -> Type[Model]: ...
        
        
class Model(metaclass=Base):
    _cached_result: SmartDict = ...
    response: HTMLResponse = ...
    def __init__(self, html_document=None, response: HTMLResponse=None): ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getitem__(self) -> str: ...
    def _get_field_by_name(self, field_name) -> Field: ...
    def add_calculated_value(self, name: str, value: Any, *funcs: Optional[Union[Add, Divide, Substract, Multiply]]) -> None: ...
    def add_case(self, value: Any, case: When) -> None: ...
    def add_using_expression(self, name: str, tag: str, attrs: Optional[dict] = {}) -> None: ...
    def add_values(self, **attrs) -> None: ...
    def add_value(self, name: str, value: Any) -> None: ...
    def resolve_fields(self) -> List: ...
    def full_clean(self, dataframe, **kwargs): ...
    def clean(self, dataframe, **kwargs): ...
    def save(self, commit: Optional[bool] = True, filename: Optional[str] = None, **kwargs) -> Union[None, Union[list, dict]]: ...

from collections import defaultdict
from functools import cached_property, total_ordering
from typing import (Any, Dict, Generator, List, Literal, Optional, Self, Type,
                    Union)

# from zineb.utils.containers import SmartDict
from zineb.models.datastructure import Model
from zineb.utils.containers import Row, Synchronizer


class Synchronizer:
    columns: Columns = ...
    _fields_names: tuple = ...
    column_rows: List[Row] = ...
    current_updated_columns: set[str] = ...
    def __init__(self, columns: Columns) -> None: ...
    @property
    def get_last_row(self) -> Row: ...
    def reset(self) -> None: ...
    def synchronize(self, current_column: str,
                    column_rows: List[Row]) -> None: ...


class Columns:
    smart_dict: SmartDict = ...
    model: Model = ...
    declared_fields: list[str] = ...
    declared_fields_with_id: list[Literal['id']] = ...
    columns: list[Column] = ...
    synchronizer: Synchronizer = ...
    def __init__(self, smart_dict: SmartDict) -> None: ...
    def __repr__(self) -> str: ...
    def __iter__(self) -> Generator[Column]: ...
    def __len__(self) -> int: ...
    @cached_property
    def number_of_items(self) -> int: ...
    @cached_property
    def as_values(self) -> Union[defaultdict, dict]: ...
    @cached_property
    def as_records(self) -> list[dict]: ...
    @cached_property
    def as_csv(self) -> list[list]: ...
    @cached_property
    def first(self) -> Union[Column, None]: ...
    @cached_property
    def last(self) -> Union[Column, None]: ...
    def get_column(self, name: str) -> Column: ...
    def get_column_at_index(self, index: int) -> Column: ...


class Column:
    index: int = ...
    _field_name: str = ...
    _column_name: str = ...
    _columns_instance: Column = ...
    smart_dict: SmartDict = ...
    column_rows: list = ...
    colum_values: list = ...

    def __init__(
        self,
        columns_instance: Columns,
        index: int, field_name: str
    ) -> None: ...

    def __repr__(self) -> str: ...
    def __eq__(self) -> bool: ...
    def __hash__(self) -> int: ...
    def __len__(self) -> int: ...

    @cached_property
    def get_column_values(self) -> list[Union[int,
                                              str, float, list, dict, None]]: ...

    @cached_property
    def get_row_values(self) -> dict: ...
    @cached_property
    def first_row(self) -> Union[Row, False]: ...
    @cached_property
    def last_row(self) -> Union[Row, False]: ...

    def add_new_row(
        self,
        name: str,
        value: Union[int, str, float, list, dict, None],
        id_value: int = ...
    ) -> None: ...

    def get_row_by_index(self, index: int) -> Row: ...


@total_ordering
class Row:
    field_id: Literal[1] = ...
    _declared_fields: list[str] = ...
    row_values: dict = ...

    def __init__(
        self,
        field_id: int,
        field_name: str,
        field_value: list[Any],
        fields: list[str]
    ) -> None: ...

    def __repr__(self) -> str: ...
    def __getitem__(self, column: str) -> dict: ...
    def __eq__(self, item: Union[Row, Any]) -> bool: ...
    def __gt__(self, item: Union[Row, Any]) -> bool: ...
    def __contains__(self, item: Any) -> bool: ...
    def update_column_value(self, name: str, value: Any): ...


class SmartDict:
    fields: tuple = ...
    order_by: List[List[str, bool]] = ...
    columns: Columns = ...

    def __init__(
        self,
        *fields: str,
        order_by: Optional[List[List[str, bool]]]
    ) -> None: ...

    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @classmethod
    def new_instance(cls, *fields: str) -> SmartDict: ...
    def get_related_item(self, index: int, using: SmartDict) -> Row: ...

    def update(
        self,
        name: str,
        value: Union[str, int, float, list, dict]
    ) -> None: ...

    def update_multiple(self, attrs: dict) -> None: ...
    def apply_sort(self, values: list) -> Union[list, tuple, SmartDict]: ...


class ModelSmartDict(SmartDict):
    model: Type = ...
    def __init__(self, model: Model, order_by: list = ...) -> None: ...
    @classmethod
    def new_instance(cls, model: Model, **kwargs) -> ModelSmartDict: ...
    def apply_sort(self, values: List) -> List: ...

from collections import defaultdict
from typing import Any, Dict, List, Literal, Optional, Union

from zineb.models.datastructure import Model

class SmartDict:
    current_updated_fields: set = ...
    fields: tuple = ...
    order_by: List[List[str, bool]] = ...
    values: defaultdict = ...
    def __init__(self, *fields: str, order_by: Optional[List[List[str, bool]]]) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @classmethod
    def new_instance(cls, model: Model) -> SmartDict: ...
    def _last_value(self, name: str) -> list: ...
    def get_container(self, name: str) -> list: ...
    def update(self, name: str, value: Union[str, int, float, list, dict]) -> None: ...
    def update_multiple(self, attrs: dict) -> None: ...
    def apply_sort(self, values: list) -> None: ...
    def as_values(self) -> Dict[str, List[str]]: ...
    def as_list(self, include_index: bool = ...) -> List[Dict[str, Any]]: ...
    def as_csv(self) -> List[List[Any]]: ...
    def run_constraints(self, container: list) -> None: ...


class ModelSmartDict(SmartDict):
    include_id_field: bool = ...
    def __init__(self, model: Model, order_by: list = ..., include_id_field: bool = ...) -> None: ...
    @classmethod
    def new_instance(cls, model: Model, **kwargs) -> ModelSmartDict: ...
    def apply_sort(self, values: List) -> List: ...

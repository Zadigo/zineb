from typing import Callable, List, Union

from zineb.models.datastructure import Model
from zineb.utils.containers import SmartDict

class BaseConstraint:
    name: str = ...
    model: Model = ...
    _data_container: SmartDict = ...
    constrained_fields: List[str] = ...
    condition: Callable = ...
    def __init__(
        self,
        fields: List[str],
        name: str,
        condition: Callable[..., bool] = ...
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __call__(
        self,
        value_to_check: Union[str, int, float]
    ) -> List: ...
    def update_model_options(self, model: Model) -> None: ...


class UniqueConstraint(BaseConstraint): ...
